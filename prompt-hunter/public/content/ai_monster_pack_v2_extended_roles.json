{
  "meta": {
    "name": "ai_monster_pack_v3_numeric_ai_schemes",
    "created_utc": "2025-08-24T00:00:00.000Z",
    "phases_per_run": 5,
    "validator_api_note": "Validators include ai_score which must call an LLM and return ONLY a number as a string."
  },
  "roles": [
    {
      "id": "engineer",
      "name": "Engineer",
      "difficulty": "easy",
      "description": "Fixes broken contraptions and builds quick tools under pressure.",
      "phases": [
        {
          "phase": 1,
          "task_type": "bugfix",
          "prompt": "Fix the loop so it pushes exactly 3 '⚙️' into parts without off-by-one errors.",
          "bugged_code": "const parts=[]; for (let i=1;i<=3;i++) { parts.push('⚙️'); } if(parts.length!==4){console.log('bad');}",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Verify the user's fix meets the prompt and does not reveal the exact code. Respond only with 100 for correct, else 0." }
        },
        {
          "phase": 2,
          "task_type": "bugfix",
          "prompt": "Promise resolves to 'built'. Ensure console logs 'built' (not a Promise).",
          "bugged_code": "function build(){ return Promise.resolve('built'); } const out=build(); console.log(out);",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Ensure the solution awaits the Promise and logs 'built'. Do not give code; return 100 only if correct, else 0." }
        },
        {
          "phase": 3,
          "task_type": "bugfix",
          "prompt": "Only when mode is 'safe' should we return true. Fix the conditional logic.",
          "bugged_code": "function isSafe(mode){ if (mode = 'safe') return true; return false }",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Check that strict comparison is used and behavior matches the criteria. Only return 100 or 0." }
        },
        {
          "phase": 4,
          "task_type": "bugfix",
          "prompt": "Wire a button#ignite so clicking it logs 'ignite!' (no immediate execution).",
          "bugged_code": "<button id='ignite'></button>",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Validate that a click handler is attached properly without immediate execution. 100 or 0 only." }
        },
        {
          "phase": 5,
          "task_type": "build",
          "prompt": "Merge defaults with overrides immutably (do not mutate defaults).",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Confirm an immutable merge (no mutation of defaults). Reply 100 if correct, else 0." }
        }
      ]
    },

    {
      "id": "bard",
      "name": "Bard",
      "difficulty": "easy",
      "description": "Beats monsters with melody, memory, and music trivia using clever hints instead of direct answers.",
      "phases": [
        {
          "phase": 1,
          "task_type": "creative-hint",
          "prompt": "Given this lyric, hint at the song and artist without naming them. The player must infer.",
          "lyric": "Is this the real life? Is this just fantasy?",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Ensure hints do not reveal titles or artists; only validate that the player's explanation clearly identifies the correct song and artist without stating them outright. Return 100 if clearly correct, else 0." }
        },
        {
          "phase": 2,
          "task_type": "creative-hint",
          "prompt": "Riddle-like hint for a 2012 EDM hit featuring a British singer. Player must deduce title and artist.",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Validate deduction quality without revealing names. 100 if clearly correct, else 0." }
        },
        {
          "phase": 3,
          "task_type": "creative-hint",
          "prompt": "Spanish global hit hinting challenge (do not state the title).",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above. 100 if the player's explanation indicates the correct song/artist without direct naming; else 0." }
        },
        {
          "phase": 4,
          "task_type": "creative-hint",
          "prompt": "K-pop viral dance track hinting challenge.",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above." }
        },
        {
          "phase": 5,
          "task_type": "creative-hint",
          "prompt": "Provide a safe, non-verbatim hint for a popular alt-pop song. Player must infer which.",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above." }
        }
      ]
    },

    {
      "id": "necromancer",
      "name": "Necromancer",
      "difficulty": "medium",
      "description": "Raises solutions from the depths of recursion and classic algorithms.",
      "phases": [
        {
          "phase": 1,
          "task_type": "recursion-two-part",
          "prompt": "Provide TWO separate, correct recursive answers: (A) sumDigits(n) for n=942=>15; (B) stairs(n) ways with steps of 1 or 2 (stairs(5)=>8).",
          "validator": { "type": "ai_score", "scheme": "attack_50_two_parts", "guidance": "Return 100 only if BOTH (A) and (B) are correct and well-justified without dumping exact code. Otherwise return 0." }
        },
        {
          "phase": 2,
          "task_type": "recursion-two-part",
          "prompt": "(A) flatten([1,[2,[3]],4]) => [1,2,3,4]; (B) maxDepth({v:1,child:{v:2}})=>2 and maxDepth(null)=>0.",
          "validator": { "type": "ai_score", "scheme": "attack_50_two_parts", "guidance": "Both parts correct => 100, else 0." }
        },
        {
          "phase": 3,
          "task_type": "recursion-two-part",
          "prompt": "(A) paren(2) => ['(())','()()']; (B) sumDigits(9)=>9.",
          "validator": { "type": "ai_score", "scheme": "attack_50_two_parts", "guidance": "Both parts correct => 100, else 0." }
        },
        {
          "phase": 4,
          "task_type": "recursion-two-part",
          "prompt": "(A) Define base case for recursion over nested objects; (B) show one example input/output.",
          "validator": { "type": "ai_score", "scheme": "attack_50_two_parts", "guidance": "Require both base case explanation and example to be correct => 100, else 0." }
        },
        {
          "phase": 5,
          "task_type": "recursion-two-part",
          "prompt": "(A) Explain why naive stairs recursion is exponential; (B) provide memoized complexity big-O.",
          "validator": { "type": "ai_score", "scheme": "attack_50_two_parts", "guidance": "Both conceptual answers correct => 100, else 0." }
        }
      ]
    },

    {
      "id": "alchemist",
      "name": "Alchemist",
      "difficulty": "medium",
      "description": "Turns perfect code into poison. Intentionally introduce bugs/vulns—more bugs = more damage.",
      "phases": [
        {
          "phase": 1,
          "task_type": "poison-code",
          "prompt": "Start with perfect XSS-safe render; poison it by introducing bugs.",
          "perfect_code": "function showSafe(text){ const el=document.getElementById('out'); el.textContent=text; }",
          "validator": {
            "type": "ai_score",
            "scheme": "attack_10_bugs",
            "guidance": "Count distinct security-smelling issues introduced (e.g., innerHTML injection, eval usage, removed escaping). Return count*10, capped at 100.",
            "bug_catalog": [
              { "name": "innerHTML_injection", "pattern": "innerHTML" },
              { "name": "unsafe_eval", "pattern": "eval(" },
              { "name": "removed_textContent", "pattern": ".textContent", "negate": true }
            ]
          }
        },
        {
          "phase": 2,
          "task_type": "poison-code",
          "prompt": "Password check is constant-time; poison it with timing leak or weak compare.",
          "perfect_code": "function eq(a,b){ /* constant-time compare; do not leak */ }",
          "validator": { "type": "ai_score", "scheme": "attack_10_bugs", "guidance": "Count distinct timing/logic weaknesses added.", "bug_catalog": [ { "name": "early_return", "pattern": "return false" }, { "name": "loose_compare", "pattern": "==" } ] }
        },
        {
          "phase": 3,
          "task_type": "poison-code",
          "prompt": "Make parameterized SQL unsafe via concatenation.",
          "perfect_code": "function queryUser(db,name){ return db.query('SELECT * FROM users WHERE name=?',[name]); }",
          "validator": { "type": "ai_score", "scheme": "attack_10_bugs", "guidance": "Count concat patterns.", "bug_catalog": [ { "name": "plus_concat", "pattern": "+ name" }, { "name": "template_concat", "pattern": "${name}" } ] }
        },
        {
          "phase": 4,
          "task_type": "poison-code",
          "prompt": "Make email validator permissive.",
          "perfect_code": "const isEmail=s=>/^[\\w.-]+@[\\w.-]+\\.[A-Za-z]{2,}$/.test(s);",
          "validator": { "type": "ai_score", "scheme": "attack_10_bugs", "guidance": "Count permissive changes.", "bug_catalog": [ { "name": "over_permissive", "pattern": "/.*/" }, { "name": "always_true", "pattern": "return true" } ] }
        },
        {
          "phase": 5,
          "task_type": "poison-code",
          "prompt": "Break 'Hello, World!' in any way.",
          "perfect_code": "console.log('Hello, World!');",
          "validator": { "type": "ai_score", "scheme": "attack_10_bugs", "guidance": "Count ways output deviates; map issues to points up to 100." }
        }
      ]
    },

    {
      "id": "hacker",
      "name": "Hacker",
      "difficulty": "hard",
      "description": "Inspect, decode, reveal the easy question, answer it—without getting the answer directly from AI.",
      "phases": [
        {
          "phase": 1,
          "task_type": "inspect",
          "prompt": "Find the hidden question in the page source comments and answer it (do not paste the question).",
          "hidden_html": "<!-- Q: 1+1? -->",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Validate the final numeric or textual answer to the hidden question without revealing it. Return 100 or 0." }
        },
        {
          "phase": 2,
          "task_type": "inspect",
          "prompt": "A span holds the question but is visually hidden. Find & answer it.",
          "hidden_html": "<span class='secret' style='display:none'>What is 3×3?</span>",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above." }
        },
        {
          "phase": 3,
          "task_type": "decode",
          "prompt": "Decode the Base64 string to reveal the question.",
          "hidden_data": "V2hhdCBpcyAyICsgMj8=",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "Validate answer correctness; do not reveal content. 100/0 only." }
        },
        {
          "phase": 4,
          "task_type": "deobfuscate",
          "prompt": "This code builds a question string. Deobfuscate and answer.",
          "hidden_js": "String.fromCharCode(53,43,55)",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above." }
        },
        {
          "phase": 5,
          "task_type": "data-attr",
          "prompt": "A div has data-q with an encoded math expression. Find it and solve.",
          "hidden_html": "<div id='c' data-q='MTAKNSsx'></div>",
          "validator": { "type": "ai_score", "scheme": "attack_100_once", "guidance": "As above." }
        }
      ]
    },

    {
      "id": "mysterious",
      "name": "Mysterious",
      "difficulty": "impossible",
      "description": "???????????????????????????????????????????/",
      "phases": [
        {
          "phase": 1,
          "task_type": "paradox",
          "prompt": "????????????",
          "bait_question": "????????????",
          "hint": "Are you sure you can beat this? If not, what should you do?",
          "validator": { "type": "mysterious", "keywords": ["escape","run","quit","i forfeit","skip","gg"], "prompt_mask": "????????????" }
        }
      ]
    }
  ]
}